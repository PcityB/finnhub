# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build-dependencies:
    environment:
      NODE_ENV: development
    docker:
      - image: circleci/node:12.18.4
    working_directory: ~/repo
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - attach_workspace:
          at: ~/repo
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run: yarn

      - run:
          name: Build dist
          command: yarn build

      #- run:
      #    name: Setup Code Climate test reporter
      #    command: |
      #      # download test reporter as a static binary
      #      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      #      chmod +x ./cc-test-reporter
      #      ./cc-test-reporter before-build
      #    when: always

      - save_cache:
          paths:
            - node_modules
            - dist
          key: v2-dependencies-{{ checksum "package.json" }}
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./

  test_eslint:
    environment:
      NODE_ENV: development
    docker:
      - image: circleci/node:12.18.4

    working_directory: ~/repo
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run:
          name: Run eslint
          command: |
            ./node_modules/.bin/eslint "src/**/*.ts" --format junit -o reports/junit/eslint-results.xml
          when: always

      - store_test_results:
          path: reports/junit

      - store_artifacts:
          path: reports

  test_unit_parallel:
    # we'll increase the value when we'll vahe more tests
    docker:
      - image: circleci/node:12.18.4
    parallelism: 1
    environment:
      # CC_TEST_REPORTER_ID: <token>
      NODE_ENV: development
    working_directory: ~/repo
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-

      - run:
          name: Run unit tests with Mocha as reporter
          command: |
            npm test
          when: always

      #- run:
      #    name: Code Climate Test Coverage
      #    command: |
      #      ./cc-test-reporter format-coverage -t lcov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json

      #- run:
      #    name: Send coverage report to Code Climate
      #    command: |
      #      ./cc-test-reporter after-build -t lcov
      #    when: on_success

      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      #- store_artifacts:
      #    path: coverage/lcov.info

  upload-coverage:
    environment:
      #CC_TEST_REPORTER_ID: <token>
    docker:
      - image: circleci/node:12.18.4
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - run:
          name: Send coverage report to Code Climate
          command: |
            ./cc-test-reporter sum-coverage --output - codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -

      # run server when master for apollo engine push
      - run:
          name: Starting server
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              yarn start
            fi
          background: true

      # CircleCI needs global installs to be sudo

workflows:
  version: 2
  build_and_test:
    jobs:
      - build-dependencies
      - test_eslint:
          requires:
            - build-dependencies
      - test_unit_parallel:
          requires:
            - build-dependencies
      #- upload-coverage:
      #    requires:
      #      - test_unit_parallel
